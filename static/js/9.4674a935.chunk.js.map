{"version":3,"sources":["storage/selectors/postsSelector.js","views/pages/Blogpost.jsx","utils/objectUtils/getObjectSize.js"],"names":["postsSelect","createSelector","state","post","posts","postsSelector","mapStateToProps","createStructuredSelector","localPosts","connect","object","queryPostId","window","location","pathname","match","currentLocalPost","filter","Number","id","shift","fetchPost","a","fetch","json","fetchAuthor","useQueries","queryKey","queryFn","enabled","String","authors","formatText","useCallback","text","capitalize","title","user","name","body","isFetching","data","Object","values","length","map","author","userId"],"mappings":"8FAAA,8CAIaA,EAAcC,YAAe,CAFb,SAAAC,GAAK,OAAIA,EAAMC,KAAKC,SAEU,SAAAC,GAAa,OAAIA,M,4JCwE5E,IAAMC,EAAkBC,YAAyB,CAC/CC,WAAYR,MAGCS,sBAAQH,EAARG,EAhEf,YAAmC,IChBGC,EDgBlBF,EAAc,EAAdA,WACZG,EAAcC,OAAOC,SAASC,SAASC,MAAM,OAAO,GAEpDC,EAAmBR,EACtBS,QAAO,SAACd,GAAD,OAAUe,OAAOf,EAAKgB,MAAQD,OAAOP,MAC5CS,QAEGC,EAAS,uCAAG,sBAAAC,EAAA,sEAERC,MAAM,8CAAD,OAA+CZ,IAF5C,8BAGda,OAHc,mFAAH,qDAKTC,EAAW,uCAAG,sBAAAH,EAAA,sEACLC,MAAM,+CADD,8BACiDC,OADjD,mFAAH,qDAGjB,EAAwBE,qBAAW,CACjC,CACEC,SAAU,OACVC,QAASP,EACTQ,QAA6C,cAApCC,cAAcd,IAEzB,CACEW,SAAU,SACVC,QAASH,EACTI,QAA6C,cAApCC,cAAcd,MAT3B,mBAAOb,EAAP,KAAa4B,EAAb,KAaMC,EAAaC,uBAAY,SAACC,GAAD,OAAUC,YAAWD,KAAO,IAE3D,OACE,8BACGlB,EACC,gCACE,6BAAKgB,EAAWhB,EAAiBoB,SACjC,yCAAYpB,EAAiBqB,KAAKC,QAClC,4BAAIN,EAAWhB,EAAiBuB,WAEhCpC,EAAKqC,WACP,6CAC+B,KCxDD9B,EDwDdP,EAAKsC,KCvDpBC,OAAOC,OAAOjC,GAAQkC,QDwDvB,cAAC,IAAD,IACEzC,EAAKsC,MAAQV,EAAQU,KACvB,gCACE,6BAAKT,EAAW7B,EAAKsC,KAAKL,SAC1B,wCACU,IACPL,EAAQU,KAAKI,KAAI,SAACC,GAAD,OAChBA,EAAO3B,KAAOhB,EAAKsC,KAAKM,OAASD,EAAOR,KAAO,SAGnD,4BAAIN,EAAW7B,EAAKsC,KAAKF,WAG3B","file":"static/js/9.4674a935.chunk.js","sourcesContent":["import { createSelector } from 'reselect';\r\n\r\nexport const postsSelector = state => state.post.posts;\r\n\r\nexport const postsSelect = createSelector([postsSelector], postsSelector => postsSelector);\r\n","import React, { useCallback } from 'react';\r\nimport { useQueries } from 'react-query';\r\n\r\n/* Redux imports */\r\nimport { postsSelect } from '../../storage/selectors/postsSelector.js';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { connect } from 'react-redux';\r\n\r\n/* Utils import */\r\nimport capitalize from '../../utils/textFormatters/capitalize.js';\r\nimport getObjectSize from '../../utils/objectUtils/getObjectSize.js';\r\n\r\n/* Local imports */\r\nimport NotFound from './404.jsx';\r\nimport '../styles/body.css';\r\n\r\nfunction Blogpost({ localPosts }) {\r\n  const queryPostId = window.location.pathname.match(/\\d+/)[0];\r\n\r\n  const currentLocalPost = localPosts\r\n    .filter((post) => Number(post.id) === Number(queryPostId))\r\n    .shift();\r\n\r\n  const fetchPost = async () =>\r\n    await (\r\n      await fetch(`https://jsonplaceholder.typicode.com/posts/${queryPostId}`)\r\n    ).json();\r\n\r\n  const fetchAuthor = async () =>\r\n    await (await fetch(`https://jsonplaceholder.typicode.com/users/`)).json();\r\n\r\n  const [post, authors] = useQueries([\r\n    {\r\n      queryKey: 'post',\r\n      queryFn: fetchPost,\r\n      enabled: String(typeof currentLocalPost) === 'undefined',\r\n    },\r\n    {\r\n      queryKey: 'author',\r\n      queryFn: fetchAuthor,\r\n      enabled: String(typeof currentLocalPost) === 'undefined',\r\n    },\r\n  ]);\r\n\r\n  const formatText = useCallback((text) => capitalize(text), []);\r\n\r\n  return (\r\n    <div>\r\n      {currentLocalPost ? (\r\n        <div>\r\n          <h1>{formatText(currentLocalPost.title)}</h1>\r\n          <p>Author: {currentLocalPost.user.name}</p>\r\n          <p>{formatText(currentLocalPost.body)}</p>\r\n        </div>\r\n      ) : post.isFetching ? (\r\n        <div>Loading...</div>\r\n      ) : getObjectSize(post.data) === 0 ? (\r\n        <NotFound />\r\n      ) : post.data && authors.data ? (\r\n        <div>\r\n          <h1>{formatText(post.data.title)}</h1>\r\n          <p>\r\n            Author:{' '}\r\n            {authors.data.map((author) =>\r\n              author.id === post.data.userId ? author.name : ''\r\n            )}\r\n          </p>\r\n          <p>{formatText(post.data.body)}</p>\r\n        </div>\r\n      ) : (\r\n        <div>Loading...</div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  localPosts: postsSelect,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Blogpost);\r\n","export default function getObjectSize(object) {\r\n  return Object.values(object).length;\r\n}"],"sourceRoot":""}