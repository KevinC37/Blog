{"version":3,"sources":["utils/CreatePortal.jsx","globalVars/index.js","utils/CreateSuccessSnackBar.jsx","utils/api/addPost.js","utils/formValidations/addPost.js","views/pages/AddPost.jsx"],"names":["Portal","children","className","el","React","useState","document","createElement","container","useEffect","classList","add","body","appendChild","remove","ReactDOM","createPortal","SNACKBAR_SUCCCESS_MESSAGE_TYPE","DELETE","POST","ADD","SNACKBAR_SUCCESS_TIMEOUT","SuccessSnackBar","id","actionType","progress","setProgress","timer","setInterval","prevProgress","clearInterval","sx","marginTop","open","autoHideDuration","anchorOrigin","vertical","horizontal","severity","width","variant","color","value","Number","addPostViaAPI","post","a","fetch","method","JSON","stringify","headers","setPostIds","setPostId","setUserId","requests","map","url","result","Promise","all","then","responses","errors","filter","response","ok","length","Error","statusText","json","data","forEach","datum","index","Date","now","catch","error","console","addPostValidationSchema","Yup","shape","title","required","mapStateToProps","createStructuredSelector","author","selectFullName","connect","showSnackbar","setShowSnackbar","postId","userId","status","btnColor","disabled","postStatus","setPostStatus","formOptions","resolver","yupResolver","useForm","register","handleSubmit","formState","setTimeout","clearTimeout","submitData","useCallback","onSubmit","fullName","store","dispatch","addPost","TextField","type","margin","label","multiline","minRows","maxRows","message","Button","tabIndex","style","size"],"mappings":"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","file":"static/js/7.2ad1e2a5.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nexport default function Portal({\r\n  children,\r\n  className = 'root-portal',\r\n  el = 'div',\r\n}) {\r\n  const [container] = React.useState(() => {\r\n    return document.createElement(el);\r\n  });\r\n\r\n  useEffect(() => {\r\n    container.classList.add(className);\r\n    document.body.appendChild(container);\r\n\r\n    return () => {\r\n      container.remove();\r\n    };\r\n  }, [className, container]);\r\n\r\n  return ReactDOM.createPortal(children, container);\r\n}\r\n","export const SNACKBAR_SUCCCESS_MESSAGE_TYPE = { DELETE: 'deleted', POST: 'posted', ADD: 'added' };\r\nexport const SNACKBAR_SUCCESS_TIMEOUT = 5600;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\n/* MUI Imports */\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport Alert from '@mui/material/Alert';\r\n\r\n/* Local imports */\r\nimport Portal from './CreatePortal.jsx';\r\n\r\nexport default function SuccessSnackBar({ id, actionType }) {\r\n  const [progress, setProgress] = useState(10);\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      setProgress((prevProgress) =>\r\n        prevProgress >= 100 ? 0 : prevProgress + 15\r\n      );\r\n    }, 800);\r\n\r\n    return () => clearInterval(timer);\r\n  }, []);\r\n\r\n  return (\r\n    <Portal key={id}>\r\n      <Snackbar\r\n        sx={{ marginTop: '60px' }}\r\n        open={true}\r\n        autoHideDuration={6000}\r\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      >\r\n        <Alert severity=\"success\" sx={{ width: '100%' }}>\r\n          Post with id {id} has been {actionType} successfully!\r\n          <LinearProgress\r\n            variant=\"determinate\"\r\n            color=\"success\"\r\n            value={Number(progress)}\r\n          />\r\n        </Alert>\r\n      </Snackbar>\r\n    </Portal>\r\n  );\r\n}\r\n","export const addPostViaAPI = async (post) => await fetch(`https://jsonplaceholder.typicode.com/posts/`, {\r\n  method: 'POST',\r\n  body: JSON.stringify(post),\r\n  headers: {\r\n    'Content-type': 'application/json; charset=UTF-8',\r\n  }\r\n}\r\n)\r\n\r\n\r\nexport const setPostIds = async (setPostId, setUserId) => {\r\n  const urls = [\r\n    'https://jsonplaceholder.typicode.com/posts',\r\n    'https://jsonplaceholder.typicode.com/users/',\r\n  ];\r\n  const requests = urls.map((url) => fetch(url, { method: 'GET' }));\r\n  let result = [];\r\n\r\n  await Promise.all(requests)\r\n    .then((responses) => {\r\n      const errors = responses.filter((response) => !response.ok);\r\n\r\n      if (errors.length > 0) {\r\n        throw errors.map((response) => Error(response.statusText));\r\n      }\r\n\r\n      const json = responses.map((response) => response.json());\r\n      return Promise.all(json);\r\n    })\r\n    .then((data) =>\r\n      data.forEach((datum, index) =>\r\n        index === 0 ? setPostId(Date.now()) : setUserId(datum.length + 1)\r\n      )\r\n    )\r\n    .catch((errors) => {\r\n      errors.forEach((error) => console.error(error));\r\n    });\r\n\r\n  return result;\r\n};","import * as Yup from 'yup';\r\n\r\nconst addPostValidationSchema = Yup.object().shape({\r\n  title: Yup.string()\r\n    .required(\"Oh, I think you forgot your title...\"),\r\n  body: Yup.string()\r\n    .required(`Don't be shy, add some context to your post ðŸ˜ƒ`),\r\n})\r\n\r\nexport default addPostValidationSchema;","import React, { useCallback, useEffect, useState } from 'react';\r\n\r\n/* Redux Imports */\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\n/* React forms imports */\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n\r\n/* Material UI Imports */\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n/* ----------------- Local imports ------------------- */\r\n\r\n//IMPORT API REQUEST HANDLER\r\nimport { addPostViaAPI, setPostIds } from '../../utils/api/addPost.js';\r\n\r\n//IMPORT FORM VALIDATION\r\nimport addPostValidationSchema from '../../utils/formValidations/addPost.js';\r\n\r\n//IMPORTING REDUX STORE STUFF\r\nimport { addPost } from '../../storage/actions/index.js';\r\nimport { store } from '../../storage/store.js';\r\nimport { selectFullName } from '../../storage/selectors/userNameSelector.js';\r\n\r\n//IMPORTING SNACKBAR\r\nimport SuccessSnackBar from '../../utils/CreateSuccessSnackBar.jsx';\r\nimport { SNACKBAR_SUCCCESS_MESSAGE_TYPE } from '../../globalVars/index.js';\r\n\r\n//IMPORTING STYLES\r\nimport '../styles/components/AddPost.css';\r\n\r\nfunction AddPost({ author }) {\r\n  const [showSnackbar, setShowSnackbar] = useState(false); //for triggering the 'Post state' popup\r\n  const [postId, setPostId] = useState(null);\r\n  const [userId, setUserId] = useState(null);\r\n  const [postStatus, setPostStatus] = useState({\r\n    status: 'Add post',\r\n    btnColor: 'primary',\r\n    disabled: false,\r\n  });\r\n\r\n  const formOptions = { resolver: yupResolver(addPostValidationSchema) };\r\n  const { register, handleSubmit, formState } = useForm(formOptions);\r\n  const { errors } = formState;\r\n\r\n  useEffect(() => {\r\n    //generate unique IDs for the upcoming new post\r\n    setPostIds(setPostId, setUserId);\r\n\r\n    //initializing the close snackbar timer\r\n    let timer;\r\n    if (showSnackbar) timer = setTimeout(() => setShowSnackbar(false), 5600);\r\n\r\n    //on unmount - clear the timer\r\n    return () => clearTimeout(timer);\r\n  }, [showSnackbar]);\r\n\r\n  const submitData = useCallback(async (post) => {\r\n    await addPostViaAPI(post);\r\n  }, []);\r\n\r\n  const onSubmit = useCallback(\r\n    async ({ title, body }) => {\r\n      setShowSnackbar(true);\r\n\r\n      const post = {\r\n        userId: userId,\r\n        author: author.fullName,\r\n        id: postId,\r\n        title: title,\r\n        body: body,\r\n      };\r\n\r\n      store.dispatch(addPost(post));\r\n\r\n      try {\r\n        await submitData(post);\r\n        setPostStatus({\r\n          status: 'Success! Post added',\r\n          btnColor: 'default',\r\n          disabled: true,\r\n        });\r\n      } catch (e) {\r\n        setPostStatus({\r\n          status: `'Error': ${e}`,\r\n          btnColor: 'secondary',\r\n          disabled: false,\r\n        });\r\n      }\r\n    },\r\n    [author.fullName, postId, userId, submitData]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <h2 className=\"form___header\">Create post</h2>\r\n      <form onSubmit={handleSubmit(onSubmit)} className=\"form___main\">\r\n        <TextField\r\n          type=\"text\"\r\n          error={!!errors.title}\r\n          margin=\"normal\"\r\n          variant=\"outlined\"\r\n          className=\"input___field\"\r\n          label=\"Blogpost Title\"\r\n          multiline\r\n          minRows={1}\r\n          maxRows={2}\r\n          {...register('title')}\r\n        />\r\n        {errors.title && <p>Title cannot be empty!</p>}\r\n\r\n        <TextField\r\n          type=\"text\"\r\n          error={!!errors.body}\r\n          margin=\"normal\"\r\n          variant=\"outlined\"\r\n          className=\"input___field\"\r\n          label=\"What's that you would like to share with us today?\"\r\n          multiline\r\n          minRows={10}\r\n          maxRows={10}\r\n          {...register('body')}\r\n        />\r\n        {errors.body && <p>{errors.body?.message}</p>}\r\n\r\n        <Button\r\n          tabIndex=\"-1\"\r\n          style={{ marginTop: 0.5 + 'em' }}\r\n          className=\".submit___button___add___post\"\r\n          type=\"submit\"\r\n          color={postStatus.btnColor}\r\n          size=\"large\"\r\n          disabled={postStatus.disabled}\r\n          variant=\"contained\"\r\n        >\r\n          {postStatus.status}\r\n        </Button>\r\n        {showSnackbar ? (\r\n          <div>\r\n            <SuccessSnackBar\r\n              id={postId}\r\n              actionType={SNACKBAR_SUCCCESS_MESSAGE_TYPE.ADD}\r\n            />\r\n          </div>\r\n        ) : null}\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  author: selectFullName,\r\n});\r\n\r\nexport default connect(mapStateToProps)(AddPost);\r\n"],"sourceRoot":""}