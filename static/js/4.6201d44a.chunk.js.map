{"version":3,"sources":["storage/selectors/postsSelector.js","views/components/partials/modals/EditModal.jsx","utils/api/removePost.js","views/components/partials/cards/CardMenu.jsx","utils/stringToColor.js","views/components/partials/cards/Cards.jsx","views/pages/HomePage.jsx"],"names":["postsSelect","createSelector","state","post","posts","postsSelector","EditModal","props","reduxStore","useStore","title","capitalize","body","useState","status","btnColor","postStatus","setPostStatus","busEditModalState","validationSchema","Yup","shape","required","formOptions","resolver","yupResolver","useForm","register","handleSubmit","errors","formState","updatePost","data","a","fetch","id","method","headers","JSON","stringify","handleForm","postToEdit","dispatch","editPost","handleClose","useCallback","e","className","onClick","stopPropagation","onMouseDown","Button","onSubmit","TextField","label","variant","InputLabelProps","shrink","defaultValue","margin","multiline","minRows","maxRows","size","message","type","color","API_DELETE_POST","currentBlogpost","document","getElementById","response","getState","filter","element","length","removePost","remove","ok","CardMenu","busMenuState","menuState","editModalState","setEditModalState","showSnackbar","setShowSnackbar","hideMenu","useEffect","timer","setTimeout","SNACKBAR_SUCCESS_TIMEOUT","console","log","clearTimeout","deletePost","hidden","MenuItem","disableRipple","actionType","SNACKBAR_SUCCCESS_MESSAGE_TYPE","DELETE","stringToColor","string","i","hash","charCodeAt","toString","substr","useStyles","makeStyles","card","width","height","position","image","maxWidth","maxHeight","description","alignSelf","CardTemplate","styles","setMenuState","companyName","setCompanyName","user","company","name","CssBaseline","Card","CardHeader","avatar","Avatar","initials","match","children","error","stringAvatar","style","backgroundColor","String","subheader","action","IconButton","to","CardActionArea","CardContent","Typography","gutterBottom","component","loadPosts","json","loadUsers","MemoizedBlogposts","localPosts","useQueries","queryKey","queryFn","users","loadAllPosts","mergedPosts","isSuccess","forEach","userId","linkUserToPost","map","push","unshift","allPosts","useMemo","Box","sx","display","alignItems","p","m","bgcolor","flexWrap","Blogposts","memo","mapStateToProps","createStructuredSelector","connect"],"mappings":"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","file":"static/js/4.6201d44a.chunk.js","sourcesContent":["import { createSelector } from 'reselect';\r\n\r\nexport const postsSelector = state => state.post.posts;\r\n\r\nexport const postsSelect = createSelector([postsSelector], postsSelector => postsSelector);\r\n","import React, { useState, useCallback } from 'react';\r\n\r\n/* Material UI Imports */\r\nimport { TextField } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport Close from '@material-ui/icons/Close';\r\n\r\n/* React hook form imports */\r\nimport { useForm } from 'react-hook-form';\r\nimport * as Yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n\r\n/* Utils imports */\r\nimport capitalize from '../../../../utils/textFormatters/capitalize';\r\n\r\n/* Redux imports */\r\nimport { useStore } from 'react-redux';\r\nimport { editPost } from '../../../../storage/actions';\r\n\r\n/* Local Imports */\r\nimport '../../../styles/modals/EditModal.css';\r\nimport { Portal } from '../../../../utils/CreatePortal';\r\n\r\nexport default function EditModal(props) {\r\n  const reduxStore = useStore();\r\n  const title = capitalize(props.title);\r\n  const body = capitalize(props.body);\r\n  const [postStatus, setPostStatus] = useState({\r\n    status: 'Update post',\r\n    btnColor: 'primary',\r\n  });\r\n  const busEditModalState = props.busEditModalState;\r\n\r\n  /* EDIT MODAL VALIDATION */\r\n  const validationSchema = Yup.object().shape({\r\n    title: Yup.string().required('Oops, the title cannot be empty'),\r\n    body: Yup.string().required(\"Don't forget to add some content\"),\r\n  });\r\n\r\n  const formOptions = { resolver: yupResolver(validationSchema) };\r\n\r\n  /* Initializing REACT-HOOKS-FORM */\r\n  const { register, handleSubmit, formState } = useForm(formOptions);\r\n  const { errors } = formState;\r\n\r\n  /* Edit post modal --- patching the data */\r\n  const updatePost = async (data) =>\r\n    await fetch(`https://jsonplaceholder.typicode.com/posts/${props.id}`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n  const handleForm = async (postToEdit) => {\r\n    postToEdit.id = props.id;\r\n    try {\r\n      await updatePost(postToEdit);\r\n      setPostStatus({ status: 'Success', btnColor: 'default' });\r\n      reduxStore.dispatch(editPost(postToEdit));\r\n    } catch (e) {\r\n      setPostStatus({ status: `'Error': ${e}`, btnColor: 'secondary' });\r\n    }\r\n  };\r\n\r\n  /* Closing the modal */\r\n  const handleClose = useCallback(\r\n    (e) => busEditModalState(e),\r\n    [busEditModalState]\r\n  );\r\n\r\n  return (\r\n    <Portal>\r\n      <div\r\n        className=\"edit___modal___container\"\r\n        onClick={(e) => e.stopPropagation()}\r\n        onMouseDown={(e) => e.stopPropagation()}\r\n      >\r\n        <div className=\"edit___modal___wrapper\">\r\n          <div className=\"edit___modal___header\">\r\n            <h2 className=\"edit___modal___header___title\">Edit post</h2>\r\n            <Button\r\n              className=\"edit___modal___header___close\"\r\n              onClick={(e) => handleClose(e)}\r\n            >\r\n              <Close />\r\n            </Button>\r\n          </div>\r\n          <div className=\"edit___modal___body\">\r\n            <form\r\n              className=\"edit___modal___form\"\r\n              onSubmit={handleSubmit(handleForm)}\r\n            >\r\n              <TextField\r\n                {...register('title')}\r\n                label=\"Title\"\r\n                variant=\"outlined\"\r\n                InputLabelProps={{ shrink: true }}\r\n                defaultValue={title}\r\n                margin=\"normal\"\r\n                multiline\r\n                minRows={1}\r\n                maxRows={2}\r\n                size=\"small\"\r\n              />\r\n              {errors.title ? <p>{errors.title?.message}</p> : <></>}\r\n              <TextField\r\n                {...register('body')}\r\n                label=\"Body\"\r\n                variant=\"outlined\"\r\n                defaultValue={body}\r\n                multiline\r\n                minRows={4}\r\n                margin=\"normal\"\r\n                maxRows={10}\r\n                size=\"medium\"\r\n              />\r\n              {errors.body ? <p>{errors.body?.message}</p> : <></>}\r\n              <Button\r\n                type=\"submit\"\r\n                className=\"edit___modal___form___submit___button\"\r\n                color={postStatus.btnColor}\r\n                variant=\"contained\"\r\n              >\r\n                {postStatus.status}\r\n              </Button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Portal>\r\n  );\r\n}\r\n","/* Redux imports*/\r\nimport { removePost } from '../../storage/actions/index.js';\r\n\r\n\r\n\r\nconst API_DELETE_POST = async (props, reduxStore) => {\r\n  const currentBlogpost = document.getElementById(`blogpost_id_${props.id}`);\r\n  const response = await fetch(`https://jsonplaceholder.typicode.com/posts/${props.id}`, { method: 'DELETE' });\r\n\r\n  const isInReduxStore = !!reduxStore.getState().post.posts.filter(element => element.id === props.id).length;\r\n  if (isInReduxStore) {\r\n    reduxStore.dispatch(removePost(props.id));\r\n    currentBlogpost.remove();\r\n  } else if (response.ok) {\r\n    currentBlogpost.remove();\r\n  }\r\n};\r\n\r\nexport default API_DELETE_POST;","import React, { useState, useCallback, useEffect } from 'react';\r\n\r\n/* Material UI Imports */\r\nimport { MenuItem } from '@material-ui/core';\r\nimport Delete from '@material-ui/icons/Delete';\r\nimport Edit from '@material-ui/icons/Edit';\r\n\r\n/* Redux imports */\r\nimport { useStore } from 'react-redux';\r\n\r\n/* Global variable imports */\r\nimport { SNACKBAR_SUCCESS_TIMEOUT } from '../../../../globalVars';\r\nimport { SNACKBAR_SUCCCESS_MESSAGE_TYPE } from '../../../../globalVars';\r\n\r\n/* Local Imports */\r\nimport EditModal from '../modals/EditModal.jsx';\r\nimport '../../../styles/components/cards/CardMenu.css';\r\nimport SuccessSnackBar from '../../../../utils/CreateSuccessSnackBar';\r\nimport API_DELETE_POST from '../../../../utils/api/removePost.js';\r\n\r\nexport default function CardMenu(props) {\r\n  const busMenuState = props.busMenuState;\r\n  const menuState = props.menuState;\r\n  const [editModalState, setEditModalState] = useState(false);\r\n  const [showSnackbar, setShowSnackbar] = useState(false);\r\n  const reduxStore = useStore();\r\n\r\n  const busEditModalState = useCallback(\r\n    (e) => {\r\n      e.stopPropagation();\r\n      setEditModalState(!editModalState);\r\n    },\r\n    [editModalState]\r\n  );\r\n\r\n  const hideMenu = useCallback(\r\n    (e) => {\r\n      e.stopPropagation();\r\n      busMenuState();\r\n    },\r\n    [busMenuState]\r\n  );\r\n\r\n  useEffect(() => {\r\n    //initializing the timer to close snackbar\r\n    let timer;\r\n    if (showSnackbar) {\r\n      timer = setTimeout(\r\n        () => setShowSnackbar(false),\r\n        SNACKBAR_SUCCESS_TIMEOUT\r\n      );\r\n      console.log(showSnackbar);\r\n    }\r\n\r\n    //on unmount - clear the snackbar timer\r\n    return () => clearTimeout(timer);\r\n  }, [showSnackbar]);\r\n\r\n  const deletePost = useCallback(() => {\r\n    API_DELETE_POST(props, reduxStore);\r\n    setShowSnackbar(true);\r\n  }, [props, reduxStore]);\r\n\r\n  return (\r\n    <>\r\n      <div hidden={!menuState}>\r\n        <div>\r\n          <div className=\"card___menu\">\r\n            <MenuItem\r\n              onClick={(e) => hideMenu(e)}\r\n              onMouseDown={(e) => busEditModalState(e)}\r\n              disableRipple\r\n            >\r\n              <Edit />\r\n              <span>Edit</span>\r\n            </MenuItem>\r\n\r\n            <MenuItem onClick={deletePost} disableRipple>\r\n              <Delete />\r\n              <span>Delete</span>\r\n            </MenuItem>\r\n          </div>\r\n        </div>\r\n\r\n        {editModalState ? (\r\n          <EditModal\r\n            {...props}\r\n            editModalState={editModalState}\r\n            busEditModalState={(e) => busEditModalState(e)}\r\n          />\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </div>\r\n\r\n      {showSnackbar ? (\r\n        <SuccessSnackBar\r\n          id={props.id}\r\n          actionType={SNACKBAR_SUCCCESS_MESSAGE_TYPE.DELETE}\r\n        />\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","export default function stringToColor(string) {\r\n  let hash = 0;\r\n  let i;\r\n\r\n  for (i = 0; i < string.length; i += 1) {\r\n    hash = string.charCodeAt(i) + ((hash << 5) - hash);\r\n  }\r\n\r\n  let color = '#';\r\n\r\n  for (i = 0; i < 3; i += 1) {\r\n    const value = (hash >> (i * 8)) & 0xff;\r\n    color += `00${value.toString(16)}`.substr(-2);\r\n  }\r\n\r\n  return color;\r\n}","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n/* Material UI Imports */\r\nimport { Card } from '@material-ui/core';\r\nimport { CardActionArea } from '@material-ui/core';\r\nimport { Typography } from '@material-ui/core';\r\nimport { CardContent } from '@material-ui/core';\r\nimport { makeStyles, CssBaseline } from '@material-ui/core';\r\nimport { CardHeader } from '@material-ui/core';\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Avatar } from '@material-ui/core';\r\nimport MoreVert from '@material-ui/icons/MoreVert';\r\n\r\n/* Util imports */\r\nimport capitalize from '../../../../utils/textFormatters/capitalize';\r\n\r\n/* Local imports */\r\nimport CardMenu from './CardMenu';\r\nimport stringToColor from '../../../../utils/stringToColor.js';\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    width: '350px',\r\n    height: '150px',\r\n    margin: '10px',\r\n    position: 'relative',\r\n  },\r\n  image: {\r\n    maxWidth: '350px',\r\n    maxHeight: '350px',\r\n    height: '350px',\r\n  },\r\n  description: {\r\n    alignSelf: 'end',\r\n  },\r\n});\r\n\r\nfunction CardTemplate(props) {\r\n  const styles = useStyles({});\r\n  const [menuState, setMenuState] = useState(false);\r\n  const [companyName, setCompanyName] = useState('');\r\n  useEffect(() => {\r\n    if (typeof props.user.company !== 'undefined') {\r\n      return setCompanyName(props.user.company.name);\r\n    } else {\r\n      return setCompanyName('Terranet');\r\n    }\r\n  }, [props.user]);\r\n\r\n  // console.log(props);\r\n\r\n  function stringAvatar(name) {\r\n    try {\r\n      const initials = name.match(/[A-Z]/g);\r\n      return {\r\n        children: `${initials[0]}${initials[1]}`,\r\n      };\r\n    } catch (e) {\r\n      return console.error(e);\r\n    }\r\n  }\r\n\r\n  const busMenuState = useCallback(() => {\r\n    setMenuState(!menuState);\r\n  }, [menuState]);\r\n\r\n  return (\r\n    <CssBaseline>\r\n      <Card id={`blogpost_id_${props.id}`} className={styles.card}>\r\n        <CardHeader\r\n          avatar={\r\n            <Avatar\r\n              {...stringAvatar(props.user.name)}\r\n              style={{\r\n                backgroundColor: `${stringToColor(String(props.user.name))}`,\r\n              }}\r\n            />\r\n          }\r\n          title={props.user.name}\r\n          subheader={companyName}\r\n          action={\r\n            <IconButton id=\"toggle___menu___button\" onClick={busMenuState}>\r\n              <MoreVert />\r\n              <CardMenu\r\n                key={props.id}\r\n                {...props}\r\n                menuState={menuState}\r\n                busMenuState={busMenuState}\r\n                hidden=\"true\"\r\n              />\r\n            </IconButton>\r\n          }\r\n        />\r\n\r\n        <Link to={`/posts/${props.id}`}>\r\n          <CardActionArea>\r\n            <CardContent>\r\n              <Typography\r\n                gutterBottom\r\n                variant=\"subtitle1\"\r\n                component=\"div\"\r\n                color=\"textPrimary\"\r\n              >\r\n                {capitalize(props.title)}\r\n              </Typography>\r\n            </CardContent>\r\n          </CardActionArea>\r\n        </Link>\r\n      </Card>\r\n    </CssBaseline>\r\n  );\r\n}\r\n\r\nexport default CardTemplate;\r\n","import React, { useCallback, useMemo, memo } from 'react';\r\nimport { useQueries } from 'react-query';\r\n\r\n/* Material UI Imports */\r\nimport { Box } from '@material-ui/core';\r\n\r\n/* Redux Imports */\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { postsSelect } from '../../storage/selectors/postsSelector.js';\r\n\r\n/* Local imports */\r\nimport CardTemplate from '../components/partials/cards/Cards.jsx';\r\n\r\nconst loadPosts = async () =>\r\n  await (await fetch(`https://jsonplaceholder.typicode.com/posts/`)).json();\r\nconst loadUsers = async () =>\r\n  await (await fetch(`https://jsonplaceholder.typicode.com/users/`)).json();\r\n\r\nfunction linkUserToPost(posts, users) {\r\n  if (posts.isSuccess && users.isSuccess) {\r\n    return posts.data.forEach((post) => {\r\n      users.data.forEach((user) => {\r\n        if (user.id === post.userId) post.user = user || '';\r\n      });\r\n    });\r\n  } else {\r\n    return;\r\n  }\r\n}\r\n\r\nfunction MemoizedBlogposts({ localPosts }) {\r\n  const [posts, users] = useQueries([\r\n    { queryKey: 'posts', queryFn: loadPosts },\r\n    { queryKey: 'users', queryFn: loadUsers },\r\n  ]);\r\n\r\n  //Wait for the posts coming from API to load and concats the incoming data with local storage posts\r\n  const loadAllPosts = useCallback(() => {\r\n    const mergedPosts = [];\r\n\r\n    if (posts.isSuccess) {\r\n      //API POSTS\r\n      linkUserToPost(posts, users);\r\n      posts.data.map((e) => mergedPosts.push(e));\r\n\r\n      //Local posts\r\n      if (localPosts.length) {\r\n        localPosts.forEach((e) => mergedPosts.unshift(e));\r\n      }\r\n    }\r\n\r\n    return mergedPosts;\r\n  }, [users, posts, localPosts]);\r\n\r\n  const allPosts = useMemo(() => loadAllPosts(), [loadAllPosts]);\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: 'flex',\r\n        alignItems: 'flex-start',\r\n        p: 1,\r\n        m: 1,\r\n        bgcolor: 'background.paper',\r\n        height: 124,\r\n        flexWrap: 'wrap',\r\n      }}\r\n    >\r\n      {posts.isSuccess && users.isSuccess ? (\r\n        allPosts.map((e) => <CardTemplate key={e.id} {...e} />)\r\n      ) : (\r\n        <div>Loading...</div>\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n\r\nconst Blogposts = memo(MemoizedBlogposts);\r\nconst mapStateToProps = createStructuredSelector({\r\n  localPosts: postsSelect,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Blogposts);\r\n"],"sourceRoot":""}